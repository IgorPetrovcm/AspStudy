Добавление контроллера
Создадим папку Controllers
В ASP.Net Core MVC контроллер явлвяется обычным классом c#, который обычно наследуется от абстрактного базового класса Microsoft.AspNetCore.Mvc.Controller м который может иметь поля, свойства и методы.

Есть обязательные условности, которые предъявляются к контроллерам:
Класс контроллера имеет суффикс "Controller":

public class HomeController

Класс контроллера наследуется от класса, который имеет суффикс "Controller":

public class Home : Controller

К классу контроллера применяется атрибут [Controller]

[Controller]
public class Home


Для создания контроллера в пустом проекте asp, создадим папку Controllers
В ней создадим класс контроллера по шаблону из txt файла 'ControllerClass.txt'

Допустим мы создали класс HomeController с методом Index возращающим пользователю строку
Теперь обратимя к действию этого контроллера
Сопоставления запроса с контроллером и его действием происходит благодаря системе маршроутиризации. И для настройки запросов с контроллерами изменим файл Program.cs следующим образом:

добавим строку:
builder.Services.AddControllers()
этой строкой мы добаляем объекту builder возможности поддержки контроллеров

далее сопостовляем маршруты с контроллерами:

app.MapControllerRoute(name: "default", pattern: "{controller=Home}/{action=Index}/{id?}");

метод MapcontrollerRoute добавляет один маршрут с именем 'default' и шаблоном '{controller=Home}/{action=Index}/{id?}'. Данный шаблон устанавливает трехсегментную структуру строки запроса: controller/action/id


если у нас есть класс в папке Controllers, но мы не хротим, чтобы он обрабатывал запросы как контроллер, то можеь воспользоваться атрибутом [NonController]:

[NonController]
public class NewController : Controller

аналогично если мы хотим чтобы метод контроллера не рассматривалчя как его действие, то используем атрибут NonAction:

[NonAction]
public string NewIndex() {}

Атрибут [ActionName] позволяет задать другое имя для метода:

[ActionName("Index2")]
public string Index() {}


Кроме того, методы могут обслуживать различные типы HTTP запросов.
[HttpGet], [HttpPost], [HttpPut], [HttpPatch], [HttpDelete], [HttpHead]
