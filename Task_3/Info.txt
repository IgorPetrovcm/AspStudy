Класс WebApplicatipnBuilder вфполняет ряд задач, таких как:
    Установка конфигурации приложения
    Добавление сервисов
    Настройка логгирования в приложении
    Конфигурация объектов IHostBuilder и IWebHostBuilder, которые применяются для создания хоста приложения

Для реализации этич задач в классе WebApplicationBuilder определеены следующие свойства:
    Configuration - представляет объект ConfigurationManager, который применяется для добавления конфигурации в приложение
    Environment - предоставляет информацию об окружении в котором запущено приложение
    Host - объект IHostBuilder, который применяется для настройки хоста
    Logging - позволяет определить настройки логгирования в приложении
    Services -представляет коллекцию сервисов и позволяет добалять сервисы в приложение
    WebHost - объект IWebHostBuilder, который позволяет настроить отдельные настройки сервера

Класс WebApplication притменяется для управления обработкой запроса, установки маршрутов, получения сервисов итд.

Класс WebApplication применяет три интерфейса:
    IHost - применяется для запуска и остановки хоста, который прослушивает входящие запросы
    IApplicationBuilder - применяется дял установки компонентов, которые участвуют в обработке запроса
    IEndpointRouteBuilder - применяется для установки маршрутов, которые сопостовляется с запросами

Для управления хостом WebApplication определяет следующие методы:
    Run - запускает приложение
    RunAsync - асинхронно запускает приложение
    Start - запускает приложение
    StartAsync - очевидно
    StopAsync - останавливает приложение


Обработка запроса в ASP.Net устроена по принципу конвеера , который состоит из компонентов. Подобные компоненты еще называется middleware
При получении запроса  сначала данные запроса получает первый компонент в конвейере. После обработки запроса компонент middleware может закончить обработку запроса - такой компонент еще называется терминальным компонентом(terminal middleware). Либо он может передать данные запроса для обработки далее по конвейеру. После обработки запроса последним компонентом, данные запроса возращаются к предыдущего компонентку. как это вышлядит можно посмотреть в схеме 2.1.png.

Каждый middleware может быть опрелен как метод (встроенный inline компонент, либо может быть вынесен в отдельный класс

Для создания middleware используется делегат RequestDelegate, который выполняет некоторое действие и принимает контекст запроса - объект HttpContext

Свойства класса HttpContext:
    Connection - представляет информацию о подключении которое установлено для заданного запроса
    Features - получает коллекцию HTTP-функциональностей, который доступны для этого запроса
    Request - возращает объект HttpRequest? который хранит информацию о текущем запроса
    Response - возращает объект HttpRespose, который позволяет управлять ответом клиенту
    Session - хранит данные сессии для текущего запроса
    TraceIdentifier - представляет уникальный идентификатор запроса для логов трассировки
    User - представляет пользователя, связанного с этим запросом

    Компоненты middleware можно посмотреть в middleware.png

