Base command:
dotnet new web # создает проект web
dotnet run # запускает проект

Структура простейшего проекта ASP.Net.

Dependencies - добавленные зависимости
Properties - узел, иеющий некоторые настройки проекта. В файле 'launchSettings.json' описаны настройки запуска проекта, адреса по которум будет запускаться приложение.

appsettings.json - файл конфигурации приложения в формате json.

appsettings.Development.json - версия файла конфигурации приложения, которая используется в процессе разработки.

'Task_2'.csproj - стандартный файл проекта c#, описывает все настройки проекта.

Program.cs - главный файл приложения, с которого и начинается его выполнение. Код этого файла настраивает и запускает веб-приложение.

Откроем Program.cs и увидим:

    var builder = WebApplication.CreateBuilder(args);
    var app = builder.Build();

    app.MapGet("/", () => "Hello World!");

    app.Run();

Это Minimal API - упрощенная модель для запуска веб-приложений в ASP.Net.

Для моздагия объекта WebApplication необходим специальный класс-строитель - WebApplicationBuilder. И вначале создается объект с помощью статического класса WebApplication.CreateBuilder:

var builder = WebApplication.CreateBuilder(args);

Получив объект WebApplication, у него вызывается метод Build, который и создает объект WebApllication

var app = builder.Build();

С помощью объекта WebAplication можно настроить всю инфраструктуру приложения - его конфигурацию, маршруты и так далее. В файле Program.cs по умолчанию для приложения определяется один маршруты

app.MapGet("/", () => "Hello World!")

Метод MapGet() в качестве первог опараметра принимает путь, по которому можно обратиться к приложению. В данном случае это путь "/", то есть по сути корень веб-приложения эт оимя домена и порта, после которых может идти слеш, например: https://localhost:****/
В качестве второго параметра в метод MapGet() передаются обработчик запроса по этому маршруту в виде функции. Здесь это лямбда выражение, которое возвращает строку "Hello World!"
